{"version":3,"file":"parse-otel-span-description.js","sources":["../../../src/utils/parse-otel-span-description.ts"],"sourcesContent":["import type { AttributeValue } from '@opentelemetry/api';\nimport { SpanKind } from '@opentelemetry/api';\nimport type { Span as OtelSpan } from '@opentelemetry/sdk-trace-base';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport type { TransactionSource } from '@sentry/types';\n\ninterface SpanDescription {\n  op: string | undefined;\n  description: string;\n  source: TransactionSource;\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n *\n * @param otelSpan\n * @returns Better op/description to use, or undefined\n */\nexport function parseSpanDescription(otelSpan: OtelSpan): SpanDescription {\n  const { attributes, name } = otelSpan;\n\n  // if http.method exists, this is an http request span\n  const httpMethod = attributes[SemanticAttributes.HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod(otelSpan, httpMethod);\n  }\n\n  // If db.type exists then this is a database call span.\n  const dbSystem = attributes[SemanticAttributes.DB_SYSTEM];\n  if (dbSystem) {\n    return descriptionForDbSystem(otelSpan, dbSystem);\n  }\n\n  // If rpc.service exists then this is a rpc call span.\n  const rpcService = attributes[SemanticAttributes.RPC_SERVICE];\n  if (rpcService) {\n    return {\n      op: 'rpc',\n      description: name,\n      source: 'route',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  const messagingSystem = attributes[SemanticAttributes.MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      op: 'message',\n      description: name,\n      source: 'route',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  const faasTrigger = attributes[SemanticAttributes.FAAS_TRIGGER];\n  if (faasTrigger) {\n    return { op: faasTrigger.toString(), description: name, source: 'route' };\n  }\n\n  return { op: undefined, description: name, source: 'custom' };\n}\n\nfunction descriptionForDbSystem(otelSpan: OtelSpan, _dbSystem: AttributeValue): SpanDescription {\n  const { attributes, name } = otelSpan;\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  const statement = attributes[SemanticAttributes.DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\nfunction descriptionForHttpMethod(otelSpan: OtelSpan, httpMethod: AttributeValue): SpanDescription {\n  const { name, kind, attributes } = otelSpan;\n\n  const opParts = ['http'];\n\n  switch (kind) {\n    case SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  const httpTarget = attributes[SemanticAttributes.HTTP_TARGET];\n  const httpRoute = attributes[SemanticAttributes.HTTP_ROUTE];\n\n  // Ex. /api/users\n  const httpPath = httpRoute || httpTarget;\n\n  if (!httpPath) {\n    return { op: opParts.join('.'), description: name, source: 'custom' };\n  }\n\n  // Ex. description=\"GET /api/users\".\n  const description = `${httpMethod} ${httpPath}`;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const source: TransactionSource = httpRoute || httpPath === '/' ? 'route' : 'url';\n\n  return { op: opParts.join('.'), description, source };\n}\n"],"names":["SemanticAttributes","SpanKind"],"mappings":"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"}