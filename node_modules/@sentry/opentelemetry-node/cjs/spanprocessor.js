Object.defineProperty(exports, '__esModule', { value: true });

const api = require('@opentelemetry/api');
const semanticConventions = require('@opentelemetry/semantic-conventions');
const core = require('@sentry/core');
const tracing = require('@sentry/tracing');
const utils = require('@sentry/utils');
const constants = require('./constants.js');
const isSentryRequest = require('./utils/is-sentry-request.js');
const mapOtelStatus = require('./utils/map-otel-status.js');
const parseOtelSpanDescription = require('./utils/parse-otel-span-description.js');

const SENTRY_SPAN_PROCESSOR_MAP = new Map

();

/**
 * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via
 * the Sentry SDK.
 */
class SentrySpanProcessor  {
   constructor() {
    core.addGlobalEventProcessor(event => {
      const otelSpan = api.trace && api.trace.getActiveSpan && (api.trace.getActiveSpan() );
      if (!otelSpan) {
        return event;
      }

      const otelSpanContext = otelSpan.spanContext();

      // If event has already set `trace` context, use that one.
      event.contexts = {
        trace: {
          trace_id: otelSpanContext.traceId,
          span_id: otelSpanContext.spanId,
          parent_span_id: otelSpan.parentSpanId,
        },
        ...event.contexts,
      };

      return event;
    });
  }

  /**
   * @inheritDoc
   */
   onStart(otelSpan, parentContext) {
    const hub = core.getCurrentHub();
    if (!hub) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('SentrySpanProcessor has triggered onStart before a hub has been setup.');
      return;
    }
    const scope = hub.getScope();
    if (!scope) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('SentrySpanProcessor has triggered onStart before a scope has been setup.');
      return;
    }

    const otelSpanId = otelSpan.spanContext().spanId;
    const otelParentSpanId = otelSpan.parentSpanId;

    // Otel supports having multiple non-nested spans at the same time
    // so we cannot use hub.getSpan(), as we cannot rely on this being on the current span
    const sentryParentSpan = otelParentSpanId && SENTRY_SPAN_PROCESSOR_MAP.get(otelParentSpanId);

    if (sentryParentSpan) {
      const sentryChildSpan = sentryParentSpan.startChild({
        description: otelSpan.name,
        instrumenter: 'otel',
        startTimestamp: convertOtelTimeToSeconds(otelSpan.startTime),
        spanId: otelSpanId,
      });

      SENTRY_SPAN_PROCESSOR_MAP.set(otelSpanId, sentryChildSpan);
    } else {
      const traceCtx = getTraceData(otelSpan, parentContext);
      const transaction = hub.startTransaction({
        name: otelSpan.name,
        ...traceCtx,
        instrumenter: 'otel',
        startTimestamp: convertOtelTimeToSeconds(otelSpan.startTime),
        spanId: otelSpanId,
      });

      SENTRY_SPAN_PROCESSOR_MAP.set(otelSpanId, transaction);
    }
  }

  /**
   * @inheritDoc
   */
   onEnd(otelSpan) {
    const hub = core.getCurrentHub();
    if (!hub) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('SentrySpanProcessor has triggered onEnd before a hub has been setup.');
      return;
    }

    const otelSpanId = otelSpan.spanContext().spanId;
    const sentrySpan = SENTRY_SPAN_PROCESSOR_MAP.get(otelSpanId);

    if (!sentrySpan) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
        utils.logger.error(`SentrySpanProcessor could not find span with OTEL-spanId ${otelSpanId} to finish.`);
      return;
    }

    // Auto-instrumentation often captures outgoing HTTP requests
    // This means that Sentry HTTP requests created by this integration can, in turn, be captured by OTEL auto instrumentation,
    // leading to an infinite loop.
    // In this case, we do not want to finish the span, in order to avoid sending it to Sentry
    if (isSentryRequest.isSentryRequestSpan(otelSpan)) {
      // Make sure to remove any references, so this can be GCed
      SENTRY_SPAN_PROCESSOR_MAP.delete(otelSpanId);
      return;
    }

    otelSpan.events.forEach(event => {
      if (event.name !== 'exception') {
        return;
      }

      const attributes = event.attributes;
      if (!attributes) {
        return;
      }

      const message = attributes[semanticConventions.SemanticAttributes.EXCEPTION_MESSAGE];
      const syntheticError = new Error(message );

      const stack = attributes[semanticConventions.SemanticAttributes.EXCEPTION_STACKTRACE];
      if (utils.isString(stack)) {
        syntheticError.stack = stack;
      }

      const type = attributes[semanticConventions.SemanticAttributes.EXCEPTION_TYPE];
      if (utils.isString(type)) {
        syntheticError.name = type;
      }

      hub.captureException(syntheticError, {
        captureContext: {
          contexts: {
            otel: {
              attributes: otelSpan.attributes,
              resource: otelSpan.resource.attributes,
            },
            trace: {
              trace_id: otelSpan.spanContext().traceId,
              span_id: otelSpan.spanContext().spanId,
              parent_span_id: otelSpan.parentSpanId,
            },
          },
        },
      });
    });

    if (sentrySpan instanceof tracing.Transaction) {
      updateTransactionWithOtelData(sentrySpan, otelSpan);
    } else {
      updateSpanWithOtelData(sentrySpan, otelSpan);
    }

    sentrySpan.finish(convertOtelTimeToSeconds(otelSpan.endTime));

    SENTRY_SPAN_PROCESSOR_MAP.delete(otelSpanId);
  }

  /**
   * @inheritDoc
   */
   shutdown() {
    return Promise.resolve();
  }

  /**
   * @inheritDoc
   */
   async forceFlush() {
    const client = core.getCurrentHub().getClient();
    if (client) {
      return client.flush().then();
    }
    return Promise.resolve();
  }
}

function getTraceData(otelSpan, parentContext) {
  const spanContext = otelSpan.spanContext();
  const traceId = spanContext.traceId;
  const spanId = spanContext.spanId;

  const parentSpanId = otelSpan.parentSpanId;
  const traceparentData = parentContext.getValue(constants.SENTRY_TRACE_PARENT_CONTEXT_KEY) ;
  const dynamicSamplingContext = parentContext.getValue(constants.SENTRY_DYNAMIC_SAMPLING_CONTEXT_KEY)

;

  const context = {
    spanId,
    traceId,
    parentSpanId,
    metadata: {
      // only set dynamic sampling context if sentry-trace header was set
      dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,
      source: 'custom',
    },
  };

  // Only inherit sample rate if `traceId` is the same
  if (traceparentData && traceId === traceparentData.traceId) {
    context.parentSampled = traceparentData.parentSampled;
  }

  return context;
}

function updateSpanWithOtelData(sentrySpan, otelSpan) {
  const { attributes, kind } = otelSpan;

  sentrySpan.setStatus(mapOtelStatus.mapOtelStatus(otelSpan));
  sentrySpan.setData('otel.kind', api.SpanKind[kind]);

  Object.keys(attributes).forEach(prop => {
    const value = attributes[prop];
    sentrySpan.setData(prop, value);
  });

  const { op, description } = parseOtelSpanDescription.parseSpanDescription(otelSpan);
  sentrySpan.op = op;
  sentrySpan.description = description;
}

function updateTransactionWithOtelData(transaction, otelSpan) {
  transaction.setContext('otel', {
    attributes: otelSpan.attributes,
    resource: otelSpan.resource.attributes,
  });

  transaction.setStatus(mapOtelStatus.mapOtelStatus(otelSpan));

  const { op, description, source } = parseOtelSpanDescription.parseSpanDescription(otelSpan);
  transaction.op = op;
  transaction.setName(description, source);
}

function convertOtelTimeToSeconds([seconds, nano]) {
  return seconds + nano / 1000000000;
}

exports.SENTRY_SPAN_PROCESSOR_MAP = SENTRY_SPAN_PROCESSOR_MAP;
exports.SentrySpanProcessor = SentrySpanProcessor;
//# sourceMappingURL=spanprocessor.js.map
