{"version":3,"file":"spanprocessor.js","sources":["../../src/spanprocessor.ts"],"sourcesContent":["import type { Context } from '@opentelemetry/api';\nimport { SpanKind, trace } from '@opentelemetry/api';\nimport type { Span as OtelSpan, SpanProcessor as OtelSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Transaction } from '@sentry/tracing';\nimport type { DynamicSamplingContext, Span as SentrySpan, TraceparentData, TransactionContext } from '@sentry/types';\nimport { isString, logger } from '@sentry/utils';\n\nimport { SENTRY_DYNAMIC_SAMPLING_CONTEXT_KEY, SENTRY_TRACE_PARENT_CONTEXT_KEY } from './constants';\nimport { isSentryRequestSpan } from './utils/is-sentry-request';\nimport { mapOtelStatus } from './utils/map-otel-status';\nimport { parseSpanDescription } from './utils/parse-otel-span-description';\n\nexport const SENTRY_SPAN_PROCESSOR_MAP: Map<SentrySpan['spanId'], SentrySpan> = new Map<\n  SentrySpan['spanId'],\n  SentrySpan\n>();\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nexport class SentrySpanProcessor implements OtelSpanProcessor {\n  public constructor() {\n    addGlobalEventProcessor(event => {\n      const otelSpan = trace && trace.getActiveSpan && (trace.getActiveSpan() as OtelSpan | undefined);\n      if (!otelSpan) {\n        return event;\n      }\n\n      const otelSpanContext = otelSpan.spanContext();\n\n      // If event has already set `trace` context, use that one.\n      event.contexts = {\n        trace: {\n          trace_id: otelSpanContext.traceId,\n          span_id: otelSpanContext.spanId,\n          parent_span_id: otelSpan.parentSpanId,\n        },\n        ...event.contexts,\n      };\n\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public onStart(otelSpan: OtelSpan, parentContext: Context): void {\n    const hub = getCurrentHub();\n    if (!hub) {\n      __DEBUG_BUILD__ && logger.error('SentrySpanProcessor has triggered onStart before a hub has been setup.');\n      return;\n    }\n    const scope = hub.getScope();\n    if (!scope) {\n      __DEBUG_BUILD__ && logger.error('SentrySpanProcessor has triggered onStart before a scope has been setup.');\n      return;\n    }\n\n    const otelSpanId = otelSpan.spanContext().spanId;\n    const otelParentSpanId = otelSpan.parentSpanId;\n\n    // Otel supports having multiple non-nested spans at the same time\n    // so we cannot use hub.getSpan(), as we cannot rely on this being on the current span\n    const sentryParentSpan = otelParentSpanId && SENTRY_SPAN_PROCESSOR_MAP.get(otelParentSpanId);\n\n    if (sentryParentSpan) {\n      const sentryChildSpan = sentryParentSpan.startChild({\n        description: otelSpan.name,\n        instrumenter: 'otel',\n        startTimestamp: convertOtelTimeToSeconds(otelSpan.startTime),\n        spanId: otelSpanId,\n      });\n\n      SENTRY_SPAN_PROCESSOR_MAP.set(otelSpanId, sentryChildSpan);\n    } else {\n      const traceCtx = getTraceData(otelSpan, parentContext);\n      const transaction = hub.startTransaction({\n        name: otelSpan.name,\n        ...traceCtx,\n        instrumenter: 'otel',\n        startTimestamp: convertOtelTimeToSeconds(otelSpan.startTime),\n        spanId: otelSpanId,\n      });\n\n      SENTRY_SPAN_PROCESSOR_MAP.set(otelSpanId, transaction);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public onEnd(otelSpan: OtelSpan): void {\n    const hub = getCurrentHub();\n    if (!hub) {\n      __DEBUG_BUILD__ && logger.error('SentrySpanProcessor has triggered onEnd before a hub has been setup.');\n      return;\n    }\n\n    const otelSpanId = otelSpan.spanContext().spanId;\n    const sentrySpan = SENTRY_SPAN_PROCESSOR_MAP.get(otelSpanId);\n\n    if (!sentrySpan) {\n      __DEBUG_BUILD__ &&\n        logger.error(`SentrySpanProcessor could not find span with OTEL-spanId ${otelSpanId} to finish.`);\n      return;\n    }\n\n    // Auto-instrumentation often captures outgoing HTTP requests\n    // This means that Sentry HTTP requests created by this integration can, in turn, be captured by OTEL auto instrumentation,\n    // leading to an infinite loop.\n    // In this case, we do not want to finish the span, in order to avoid sending it to Sentry\n    if (isSentryRequestSpan(otelSpan)) {\n      // Make sure to remove any references, so this can be GCed\n      SENTRY_SPAN_PROCESSOR_MAP.delete(otelSpanId);\n      return;\n    }\n\n    otelSpan.events.forEach(event => {\n      if (event.name !== 'exception') {\n        return;\n      }\n\n      const attributes = event.attributes;\n      if (!attributes) {\n        return;\n      }\n\n      const message = attributes[SemanticAttributes.EXCEPTION_MESSAGE];\n      const syntheticError = new Error(message as string | undefined);\n\n      const stack = attributes[SemanticAttributes.EXCEPTION_STACKTRACE];\n      if (isString(stack)) {\n        syntheticError.stack = stack;\n      }\n\n      const type = attributes[SemanticAttributes.EXCEPTION_TYPE];\n      if (isString(type)) {\n        syntheticError.name = type;\n      }\n\n      hub.captureException(syntheticError, {\n        captureContext: {\n          contexts: {\n            otel: {\n              attributes: otelSpan.attributes,\n              resource: otelSpan.resource.attributes,\n            },\n            trace: {\n              trace_id: otelSpan.spanContext().traceId,\n              span_id: otelSpan.spanContext().spanId,\n              parent_span_id: otelSpan.parentSpanId,\n            },\n          },\n        },\n      });\n    });\n\n    if (sentrySpan instanceof Transaction) {\n      updateTransactionWithOtelData(sentrySpan, otelSpan);\n    } else {\n      updateSpanWithOtelData(sentrySpan, otelSpan);\n    }\n\n    sentrySpan.finish(convertOtelTimeToSeconds(otelSpan.endTime));\n\n    SENTRY_SPAN_PROCESSOR_MAP.delete(otelSpanId);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async forceFlush(): Promise<void> {\n    const client = getCurrentHub().getClient();\n    if (client) {\n      return client.flush().then();\n    }\n    return Promise.resolve();\n  }\n}\n\nfunction getTraceData(otelSpan: OtelSpan, parentContext: Context): Partial<TransactionContext> {\n  const spanContext = otelSpan.spanContext();\n  const traceId = spanContext.traceId;\n  const spanId = spanContext.spanId;\n\n  const parentSpanId = otelSpan.parentSpanId;\n  const traceparentData = parentContext.getValue(SENTRY_TRACE_PARENT_CONTEXT_KEY) as TraceparentData | undefined;\n  const dynamicSamplingContext = parentContext.getValue(SENTRY_DYNAMIC_SAMPLING_CONTEXT_KEY) as\n    | Partial<DynamicSamplingContext>\n    | undefined;\n\n  const context: Partial<TransactionContext> = {\n    spanId,\n    traceId,\n    parentSpanId,\n    metadata: {\n      // only set dynamic sampling context if sentry-trace header was set\n      dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      source: 'custom',\n    },\n  };\n\n  // Only inherit sample rate if `traceId` is the same\n  if (traceparentData && traceId === traceparentData.traceId) {\n    context.parentSampled = traceparentData.parentSampled;\n  }\n\n  return context;\n}\n\nfunction updateSpanWithOtelData(sentrySpan: SentrySpan, otelSpan: OtelSpan): void {\n  const { attributes, kind } = otelSpan;\n\n  sentrySpan.setStatus(mapOtelStatus(otelSpan));\n  sentrySpan.setData('otel.kind', SpanKind[kind]);\n\n  Object.keys(attributes).forEach(prop => {\n    const value = attributes[prop];\n    sentrySpan.setData(prop, value);\n  });\n\n  const { op, description } = parseSpanDescription(otelSpan);\n  sentrySpan.op = op;\n  sentrySpan.description = description;\n}\n\nfunction updateTransactionWithOtelData(transaction: Transaction, otelSpan: OtelSpan): void {\n  transaction.setContext('otel', {\n    attributes: otelSpan.attributes,\n    resource: otelSpan.resource.attributes,\n  });\n\n  transaction.setStatus(mapOtelStatus(otelSpan));\n\n  const { op, description, source } = parseSpanDescription(otelSpan);\n  transaction.op = op;\n  transaction.setName(description, source);\n}\n\nfunction convertOtelTimeToSeconds([seconds, nano]: [number, number]): number {\n  return seconds + nano / 1_000_000_000;\n}\n"],"names":[],"mappings":"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"}