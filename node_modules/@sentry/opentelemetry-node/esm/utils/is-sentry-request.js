import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';
import { SemanticAttributes } from '@opentelemetry/semantic-conventions';
import { getCurrentHub } from '@sentry/core';

/**
 *
 * @param otelSpan Checks wheter a given OTEL Span is an http request to sentry.
 * @returns boolean
 */
function isSentryRequestSpan(otelSpan) {
  const { attributes } = otelSpan;

  const httpUrl = attributes[SemanticAttributes.HTTP_URL];

  if (!httpUrl) {
    return false;
  }

  return isSentryRequestUrl(httpUrl.toString());
}

/**
 * Checks whether given url points to Sentry server
 * @param url url to verify
 */
function isSentryRequestUrl(url) {
  const dsn = _optionalChain([getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getDsn, 'call', _5 => _5()]);
  return dsn ? url.includes(dsn.host) : false;
}

export { isSentryRequestSpan };
//# sourceMappingURL=is-sentry-request.js.map
